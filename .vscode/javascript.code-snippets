{
	"Router master": {
		"scope": "javascript",
		"prefix": "router master",
		"body": [
			"const Router = require('express').Router()",
			"const Hub = require('./$1s.hub')",
			"const Middlewares = require('../middlewares')",
			"",
			"Router.post('/$1s', Middlewares.auth, Hub.create$2)",
			"",
			"Router.get('/$1s/:$1Id', Middlewares.auth, Hub.get$2)",
			"",
			"Router.get('/$1s', Middlewares.auth, Hub.get$2s)",
			"",
			"Router.put('/$1s/:$1Id', Middlewares.auth, Hub.update$2)",
			"",
			"Router.delete('/$1s/:$1Id', Middlewares.auth, Hub.delete$2)",
			"",
			"module.exports = Router",
		]
	},

	"Hub master": {
		"scope": "javascript",
		"prefix": "hub master",
		"body": [
			"const Fields = require('./$1s.fields')",
			"const Service = require('./$1s.service')",
			"",
			"module.exports = {",
				"\tcreate$2,",
				"\tget$2s,",
				"\tget$2,",
				"\tupdate$2,",
				"\tdelete$2",
			"}",
			"",
			"async function create$2(request, response) {",
				"\ttry {",
					"",
					"\t\tconst fields = new Fields(request)",
					"",
					"\t\tconst data = {",
					"\t\t}",
					"",
					"\t\tresponse.\\$data(await Service.create$2(data))",
					"",
				"\t} catch(error) {",
					"\t\tresponse.\\$error(error)",
				"\t}",
			"}",
			"",
			"async function get$2s(request, response) {",
				"\ttry {",
					"",
					"\t\tconst query = {",
						"\t\t\tpage: parseInt(request.query.page || 0),",
						"\t\t\tfind: request.query.find",
					"\t\t}",
					"",
					"\t\tresponse.\\$data(await Service.get$2s(query))",
					"",
				"\t} catch(error) {",
					"\t\tresponse.\\$error(error)",
				"\t}",
			"}",
			"",
			"async function get$2(request, response) {",
				"\ttry {",
					"",
					"\t\tconst fields = new Fields(request)",
					"",
					"\t\tconst data = {",
						"\t\t\t$1Id: fields.$1Id.get()",
					"\t\t}",
					"",
					"\t\tresponse.\\$data(await Service.get$2(data.$1Id))",
					"",
				"\t} catch(error) {",
					"\t\tresponse.\\$error(error)",
				"\t}",
			"}",
			"",
			"async function update$2(request, response) {",
				"\ttry {",
					"",
					"\t\tconst fields = new Fields(request)",
					"",
					"\t\tlet data = {",
						"\t\t\t$1Id: fields.$1Id.get()",
					"\t\t}",
					"",
					"\t\tconst props = [",
					"\t\t]",
					"",
					"\t\tprops.forEach(prop => request.body[prop] != undefined && (data[prop] = request.body[prop]))",
					"",
					"\t\tresponse.\\$data(await Service.update$2(data.$1Id, data))",
					"",
				"\t} catch(error) {",
					"\t\tresponse.\\$error(error)",
				"\t}",
			"}",
			"",
			"async function delete$2(request, response) {",
				"\ttry {",
					"",
					"\t\tconst fields = new Fields(request)",
					"",
					"\t\tconst data = {",
						"\t\t\t$1Id: fields.$1Id.get()",
					"\t\t}",
					"",
					"\t\tresponse.\\$data(await Service.delete$2(data.$1Id))",
					"",
				"\t} catch(error) {",
					"\t\tresponse.\\$error(error)",
				"\t}",
			"}",
		]
	},

	"Service master": {
		"scope": "javascript",
		"prefix": "Service master",
		"body": [
			"const Model = require('./$1s.model')",
			"const Messages = require('./$1s.messages')",
			"const Services = require('../services')",
			"const Utils = require('../utils')",
			"",
			"module.exports = {",
				"\tcreate$2,",
				"\tget$2s,",
				"\tget$2,",
				"\tupdate$2,",
				"\tdelete$2,",
				"\tModel,",
				"\tMessages",
			"}",
			"",
			"async function create$2(data) {",
				"\ttry {",
					"",
					"\t\tconst $1 = new Model(data)",
					"",
					"\t\treturn await $1.save()",
					"",
				"\t} catch(error) {",
					"\t\tthrow error",
				"\t}",
			"}",
			"",
			"async function get$2s(query) {",
				"\ttry {",
					"",
					"\t\tconst options = {}",
					"\t\tconst limit = 100",
					"\t\tconst page = query.page",
					"",
					"\t\tif(query.find) {",
						"\t\t\tconst regexp = new RegExp(query.find, 'i')",
						"\t\t\toptions.\\$or = []",
					"\t\t}",
					"",
					"\t\tconst $1s = await Model.find(options)",
						"\t\t\t.skip(page * limit)",
						"\t\t\t.limit(limit)",
						"\t\t\t.sort({created: -1})",
					"",
					"\t\tconst total = await Model.countDocuments(options)",
					"",
					"\t\treturn {",
						"\t\t\t$1s,",
						"\t\t\tmetadata: Utils.metadata(page, limit, total, $1s.length, query),",
					"\t\t}",
					"",
				"\t} catch(error) {",
					"\t\tthrow error",
				"\t}",
			"}",
			"",
			"async function get$2($1Id) {",
				"\ttry {",
					"",
					"\t\tconst $1 = await Model.findOne({_id: $1Id})",
					"",
					"\t\tif(!$1)",
						"\t\t\tthrow new Messages($1Id).$1NotFound",
					"",
					"\t\treturn $1",
					"",
				"\t} catch(error) {",
					"\t\tthrow error",
				"\t}",
			"}",
			"",
			"async function update$2($1Id, data) {",
				"\ttry {",
					"",
					"\t\tconst $1 = await get$2($1Id)",
					"\t\tconst keys = Object.keys(data)",
					"",
					"\t\tkeys.forEach(key => {",
						"\t\t\t$1[key] = data[key]",
					"\t\t})",
					"",
					"\t\treturn await $1.save()",
					"",
				"\t} catch(error) {",
					"\t\tthrow error",
				"\t}",
			"}",
			"",
			"async function delete$2($1Id) {",
				"\ttry {",
					"",
					"\t\tawait get$2($1Id)",
					"\t\tawait Model.deleteOne({_id: $1Id})",
					"",
					"\t\treturn $1Id",
					"",
				"\t} catch(error) {",
					"\t\tthrow error",
				"\t}",
			"}",
		]
	},

	"Messages master": {
		"scope": "javascript",
		"prefix": "messages master",
		"body": [
			"module.exports = class Messages {",
				"",
				"\tconstructor(\\$details, \\$message) {",
					"",
					"\t\tthis.$1SaveError = {",
						"\t\t\tcode: 503,",
						"\t\t\tkey: '$1SaveError',",
						"\t\t\tmessage: \\$message || 'Error al guardar la información del $2',",
						"\t\t\t\\$details",
					"\t\t}",
					"",
					"\t\tthis.$1GetError = {",
						"\t\t\tcode: 503,",
						"\t\t\tkey: '$1GetError',",
						"\t\t\tmessage: \\$message || 'Error al obtener la información del $2',",
						"\t\t\t\\$details",
					"\t\t}",
					"",
					"\t\tthis.$1NotFound = {",
						"\t\t\tcode: 404,",
						"\t\t\tkey: '$1NotFound',",
						"\t\t\tmessage: \\$message || 'El registro del $2 no fue encontrado',",
						"\t\t\t\\$details",
					"\t\t}",
					"",
					"\t\tthis.$1DeleteError = {",
						"\t\t\tcode: 503,",
						"\t\t\tkey: '$1DeleteError',",
						"\t\t\tmessage: \\$message || 'Error al borrar la información del $2',",
						"\t\t\t\\$details",
					"\t\t}",
				"\t}",
			"}",
		]
	},

	"Fields master": {
		"scope": "javascript",
		"prefix": "fields master",
		"body": [
			"const Validator = require('../validator')",
			"",
			"module.exports = class Fields {",
				"",
				"\tconstructor(request) {",
					"",
					"\t\tthis.props = {",
						"\t\t\t...request.headers,",
						"\t\t\t...request.params,",
						"\t\t\t...request.query,",
						"\t\t\t...request.body,",
					"\t\t}",
					"",
					"\t\tthis.$1Id = new Validator({",
						"\t\t\ttype: 'objectId',",
						"\t\t\tname: 'identificador',",
						"\t\t\tprop: '$1Id',",
						"\t\t\tvalue: this.props.$1Id,",
					"\t\t})",
				"\t}",
			"}",
		]
	},

	"Model master": {
		"scope": "javascript",
		"prefix": "model master",
		"body": [
			"const Schema = require('mongoose').Schema",
			"const Model = require('mongoose').model",
			"const ObjectId = require('mongoose').Types.ObjectId",
			"const Messages = require('./$1s.messages')",
			"",
			"const schema = new Schema({",
				"",
				"\tupdated: {",
					"\t\ttype: Date",
				"\t},",
				"",
				"\tcreated: {",
					"\t\ttype: Date,",
					"\t\tdefault: Date.now",
				"\t}",
			"})",
			"",
			"schema.pre('save', function(next) {",
				"\tthis.updated = new Date()",
				"\tnext()",
			"})",
			"",
			"schema.post('save', function(err, doc, next) {",
				"\tif(err) return next(new Messages(err).$1SaveError)",
				"\tnext()",
			"})",
			"",
			"schema.post('remove', function(err, doc, next) {",
				"\tif(err) return next(new Messages(err).$1DeleteError)",
				"\tnext()",
			"})",
			"",
			"schema.post('findOne', function(err, doc, next) {",
				"\tif(err) return next(new Messages(err).$1GetError)",
				"\tnext()",
			"})",
			"",
			"schema.post('find', function(err, doc, next) {",
				"\tif(err) return next(new Messages(err).$1GetError)",
				"\tnext()",
			"})",
			"",
			"module.exports = Model('$2s', schema)",
		]
	}
}